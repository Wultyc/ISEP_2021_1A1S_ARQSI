# This is an example Starter pipeline configuration
# Use a skeleton to build, test and deploy using manual and parallel steps
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: node:10.15.0

pipelines:
  branches:
     release:
      - parallel:
        - step:
            name: 'Test RedeMasterData'
            script:
              - cd RedeMasterData
              #- npm install
              - echo "Tests ignored"
        - step:
            name: 'Test ImportGLX'
            script:
              - cd ImportGLX
              #- npm install
              - echo "Tests ignored"
        - step:
            name: 'Test SPA'
            script:
              - cd viajantes2-spa
              #- npm install
              - echo "Tests ignored"

      - parallel:
        - step:
            name: Build RedeMasterData Image and Upload on DockerHub
            script:
              - export IMAGE_NAME=$DOCKER_HUB_USERNAME/arqsi-viajantes2-redemasterdata:latest
              - cd RedeMasterData/
              # install all dependencies
              - npm install
              #build application
              - npm run build
              # build the Docker image (this will use the Dockerfile in the root of the repo)
              - docker build -t $IMAGE_NAME .
              # authenticate with the Docker Hub registry
              - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
              # push the new Docker image to the Docker registry
              - docker push $IMAGE_NAME
            services:
              - docker
        - step:
            name: Build ImportGLX Image and Upload on DockerHub
            script:
              - export IMAGE_NAME=$DOCKER_HUB_USERNAME/arqsi-viajantes2-importglx:latest
              - cd ImportGLX/
              # install all dependencies
              - npm install
              #build application
              - npm run build
              # build the Docker image (this will use the Dockerfile in the root of the repo)
              - docker build -t $IMAGE_NAME .
              # authenticate with the Docker Hub registry
              - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
              # push the new Docker image to the Docker registry
              - docker push $IMAGE_NAME
            services:
              - docker
        - step:
            name: Build SPA Image and Upload on DockerHub
            script:
              - cd viajantes2-spa
              # install angular
              - npm install @angular/cli  @angular-devkit/build-angular @ngtools/webpack
              # install npm
              - npm install --only=production
              # build app
              - npm run build --prod
              # set image name
              - export IMAGE_NAME=$DOCKER_HUB_USERNAME/arqsi-viajantes2-spa:latest
              # build the Docker image (this will use the Dockerfile in the root of the repo)
              - docker build -t $IMAGE_NAME .
              # authenticate with the Docker Hub registry
              - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
              # push the new Docker image to the Docker registry
              - docker push $IMAGE_NAME
            services:
              - docker
            size: 2x
              
      - step:
          name: Deploy containers to Kubernets
          script:
            # Download kubectl
            - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            - chmod +x ./kubectl
            - mv ./kubectl /usr/local/bin/kubectl

            # Set KUBECONFIG
            - echo $KUBECONFIG | base64 -d > kubeconfig.yml
            - export KUBECONFIG=kubeconfig.yml
            
            #Deploy to cloud
            # RedeMasterData
            - kubectl delete deployment redemasterdata-deployment
            - kubectl apply -f ./Kubernets/redemasterdata.yaml
            # Import GLX
            - kubectl delete deployment importglx-deployment
            - kubectl apply -f ./Kubernets/importglx.yaml
            #SPA
            - kubectl delete deployment viajantes2-spa-deployment
            - kubectl apply -f ./Kubernets/viajantes2-spa.yaml

